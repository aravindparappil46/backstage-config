apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: create-domain-api-template
  title: Create Domain API Template
  description: Create a new Domain API following WFS standards
  tags:
    - java
    - domain-api
spec:
  owner: cloudhawks@ownsthis.com
  type: api
  parameters:
    - title: Please provide the following information
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the Domain API
        description:
          title: Description
          type: string
          description: Help others understand what this api is for.
        owner:
          title: Owner
          type: string
          description: Squad which owns this Domain API
          ui:field: OwnerPicker
    - title: Choose a location  
      required:
        - repoUrl
      properties: 
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - bitbucket.org
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:cookiecutter
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: '{{ parameters.component_id }}'
          description: '{{ parameters.description }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          owner: '{{ parameters.owner }}'

    - id: publish
      name: Publish
      action: publish:bitbucket
      input:
        allowedHosts: ['bitbucket.org']
        description: 'This repo contains the Domain API: {{ parameters.component_id }}'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'